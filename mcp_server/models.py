# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:46:34+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class BigQueryDatasetSource(BaseModel):
    dataset: Optional[str] = Field(
        None,
        description='Resource name of the dataset source for this listing. e.g. `projects/myproject/datasets/123`',
    )


class DataExchange(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the data exchange. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and must not start or end with spaces. Default value is an empty string. Max length: 63 bytes.',
    )
    documentation: Optional[str] = Field(
        None, description='Optional. Documentation describing the data exchange.'
    )
    icon: Optional[str] = Field(
        None,
        description='Optional. Base64 encoded image representing the data exchange. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the content of the fields are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.',
    )
    listingCount: Optional[int] = Field(
        None,
        description='Output only. Number of listings contained in the data exchange.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the data exchange. e.g. `projects/myproject/locations/US/dataExchanges/123`.',
    )
    primaryContact: Optional[str] = Field(
        None,
        description='Optional. Email or URL of the primary point of contact of the data exchange. Max Length: 1000 bytes.',
    )


class DataProvider(BaseModel):
    name: Optional[str] = Field(
        None, description='Optional. Name of the data provider.'
    )
    primaryContact: Optional[str] = Field(
        None,
        description='Optional. Email or URL of the data provider. Max Length: 1000 bytes.',
    )


class DestinationDatasetReference(BaseModel):
    datasetId: Optional[str] = Field(
        None,
        description='Required. A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.',
    )
    projectId: Optional[str] = Field(
        None, description='Required. The ID of the project containing this dataset.'
    )


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class GetPolicyOptions(BaseModel):
    requestedPolicyVersion: Optional[int] = Field(
        None,
        description='Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class ListDataExchangesResponse(BaseModel):
    dataExchanges: Optional[List[DataExchange]] = Field(
        None, description='The list of data exchanges.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='A token to request the next page of results.'
    )


class ListOrgDataExchangesResponse(BaseModel):
    dataExchanges: Optional[List[DataExchange]] = Field(
        None, description='The list of data exchanges.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='A token to request the next page of results.'
    )


class Category(Enum):
    CATEGORY_UNSPECIFIED = 'CATEGORY_UNSPECIFIED'
    CATEGORY_OTHERS = 'CATEGORY_OTHERS'
    CATEGORY_ADVERTISING_AND_MARKETING = 'CATEGORY_ADVERTISING_AND_MARKETING'
    CATEGORY_COMMERCE = 'CATEGORY_COMMERCE'
    CATEGORY_CLIMATE_AND_ENVIRONMENT = 'CATEGORY_CLIMATE_AND_ENVIRONMENT'
    CATEGORY_DEMOGRAPHICS = 'CATEGORY_DEMOGRAPHICS'
    CATEGORY_ECONOMICS = 'CATEGORY_ECONOMICS'
    CATEGORY_EDUCATION = 'CATEGORY_EDUCATION'
    CATEGORY_ENERGY = 'CATEGORY_ENERGY'
    CATEGORY_FINANCIAL = 'CATEGORY_FINANCIAL'
    CATEGORY_GAMING = 'CATEGORY_GAMING'
    CATEGORY_GEOSPATIAL = 'CATEGORY_GEOSPATIAL'
    CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE = 'CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE'
    CATEGORY_MEDIA = 'CATEGORY_MEDIA'
    CATEGORY_PUBLIC_SECTOR = 'CATEGORY_PUBLIC_SECTOR'
    CATEGORY_RETAIL = 'CATEGORY_RETAIL'
    CATEGORY_SPORTS = 'CATEGORY_SPORTS'
    CATEGORY_SCIENCE_AND_RESEARCH = 'CATEGORY_SCIENCE_AND_RESEARCH'
    CATEGORY_TRANSPORTATION_AND_LOGISTICS = 'CATEGORY_TRANSPORTATION_AND_LOGISTICS'
    CATEGORY_TRAVEL_AND_TOURISM = 'CATEGORY_TRAVEL_AND_TOURISM'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    cancelRequested: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    statusDetail: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class Publisher(BaseModel):
    name: Optional[str] = Field(
        None, description='Optional. Name of the listing publisher.'
    )
    primaryContact: Optional[str] = Field(
        None,
        description='Optional. Email or URL of the listing publisher. Max Length: 1000 bytes.',
    )


class SubscribeListingResponse(BaseModel):
    pass


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class DestinationDataset(BaseModel):
    datasetReference: Optional[DestinationDatasetReference] = Field(
        None,
        description='Required. A reference that identifies the destination dataset.',
    )
    description: Optional[str] = Field(
        None, description='Optional. A user-friendly description of the dataset.'
    )
    friendlyName: Optional[str] = Field(
        None, description='Optional. A descriptive name for the dataset.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See https://cloud.google.com/resource-manager/docs/creating-managing-labels for more information.',
    )
    location: Optional[str] = Field(
        None,
        description='Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.',
    )


class GetIamPolicyRequest(BaseModel):
    options: Optional[GetPolicyOptions] = Field(
        None,
        description='OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.',
    )


class Listing(BaseModel):
    bigqueryDataset: Optional[BigQueryDatasetSource] = Field(
        None, description='Required. Shared dataset i.e. BigQuery dataset source.'
    )
    categories: Optional[List[Category]] = Field(
        None,
        description='Optional. Categories of the listing. Up to two categories are allowed.',
    )
    dataProvider: Optional[DataProvider] = Field(
        None,
        description='Optional. Details of the data provider who owns the source data.',
    )
    description: Optional[str] = Field(
        None,
        description='Optional. Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.',
    )
    displayName: Optional[str] = Field(
        None,
        description="Required. Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces. Default value is an empty string. Max length: 63 bytes.",
    )
    documentation: Optional[str] = Field(
        None, description='Optional. Documentation describing the listing.'
    )
    icon: Optional[str] = Field(
        None,
        description='Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the contents of the field are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the listing. e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`',
    )
    primaryContact: Optional[str] = Field(
        None,
        description='Optional. Email or URL of the primary point of contact of the listing. Max Length: 1000 bytes.',
    )
    publisher: Optional[Publisher] = Field(
        None,
        description='Optional. Details of the publisher who owns the listing and who can share the source data.',
    )
    requestAccess: Optional[str] = Field(
        None,
        description='Optional. Email or URL of the request access of the listing. Subscribers can use this reference to request access. Max Length: 1000 bytes.',
    )
    state: Optional[State] = Field(
        None, description='Output only. Current state of the listing.'
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class SubscribeListingRequest(BaseModel):
    destinationDataset: Optional[DestinationDataset] = Field(
        None, description='BigQuery destination dataset to create for the subscriber.'
    )


class ListListingsResponse(BaseModel):
    listings: Optional[List[Listing]] = Field(None, description='The list of Listing.')
    nextPageToken: Optional[str] = Field(
        None, description='A token to request the next page of results.'
    )
